name: Build & Lint

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_and_lint:
    runs-on: self-hosted
    timeout-minutes: 10 # If an action exceeds 10 mins, it probably isn't ever going to complete.
    steps:
      - name: Fetch Xcode Project Packages
        run: |
          xcodebuild -resolvePackageDependencies \
          -workspace "Aurora Editor.xcworkspace"

      - uses: actions/checkout@v3

      - name: Runner environment
        run: |
          echo "MacOS Version"
          sw_vers
          echo "Xcode Version"
          xcodebuild -version
          echo "Toolchain version"
          swift -version
          echo "SwiftLint (version)"
          swiftlint version

      - name: Check SwiftLint Version
        id: check_swiftlint_version
        run: |
          current_version=$(swiftlint version)
          latest_version=$(brew info swiftlint | grep -E -o "[0-9]+\.[0-9]+\.[0-9]+")
          if [ "$current_version" == "$latest_version" ]; then
            echo "SwiftLint is up to date. Skipping upgrade step."
            echo "::set-output name=upgrade_required::false"
          else
            echo "SwiftLint needs to be upgraded."
            echo "::set-output name=upgrade_required::true"
          fi
        shell: bash

      - name: Upgrade SwiftLint
        continue-on-error: true
        run: |
          upgrade_required="${{ steps.check_swiftlint_version.outputs.upgrade_required }}"
          if [ "$upgrade_required" == "true" ]; then
            brew upgrade swiftlint
          fi
        shell: bash

      - name: SwiftLint (GH Actions)
        run: swiftlint --reporter github-actions-logging --strict

      - name: Swift (clean) Build
        run: set -o pipefail && xcodebuild -quiet -workspace "Aurora Editor.xcworkspace" -scheme "Aurora Editor" clean build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO

      - name: Clean up
        if: always()
        run: |
          echo "Cleaning up derived data"
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          echo "Clean up complete"
